PROJECT := stsaval
CUR_DIR = $(shell pwd)
PYTHON_VERSION := python3
PYTHON3_PATH := $(shell which $(PYTHON_VERSION))
GIT := $(shell which git)
VENV_DIR := $(CUR_DIR)/p3_venv
PIP_CALL := $(VENV_DIR)/bin/pip
MAKE = $(shell which make)
MODULE_PATH := $(CUR_DIR)/$(PROJECT)
SCRIPTS := $(CUR_DIR)/scripts
DOC_PATH := $(CUR_DIR)/docs
REQUIREMENT = $(CUR_DIR)/requirements.txt
VERSION_FILE = $(CUR_DIR)/$(PROJECT)/_version.py


.PHONY: fresh-install fresh-test-install deploy-test deploy-prod


fresh-install: clean setup-venv install
fresh-test-install: clean setup-venv test-install
deploy-test: clean testpypi
deploy-prod: clean pypi



.PHONY: pre-build
pre-build:    ## Remove residual build artifacts
	rm -rf $(CUR_DIR)/dist
	mkdir $(CUR_DIR)/dist

.PHONY: setup-venv
setup-venv:    ## Create and activiate python venv
	$(PYTHON3_PATH) -m venv $(VENV_DIR)
	. $(VENV_DIR)/bin/activate && $(PIP_CALL) install -U setuptools pip && \
	$(PIP_CALL) install -r $(REQUIREMENT)

.PHONY: test
test: setup_venv    ## Run pytest unittests
	@$(VENV_DIR)/bin/pip install pytest pytest-pylint coverage
	@$(VENV_DIR)/bin/py.test $(MODULE_PATH)

docs:  setup-venv    ## Generate sphinx documentation
	. $(VENV_DIR)/bin/activate && \
	$(PIP_CALL) install sphinx sphinx_rtd_theme autodoc
	#cd $(CUR_DIR) && $(MAKE) clean-docs
	cd $(DOC_PATH) && . $(VENV_DIR)/bin/activate && $(MAKE) html

.PHONY: build
build: pre-build setup-venv    ## Increment version and build dist
	sh $(SCRIPTS)/version_update.sh && . $(VENV_DIR)/bin/activate && \
	cd $(CUR_DIR) && $(PYTHON3_PATH) setup.py sdist

.PHONY: testpypi
testpypi: build    ## Deploy package to test python repository
	@echo "Deploy $(PROJECT) to test.pypi.org"
	. $(VENV_DIR)/bin/activate && twine upload --repository testpypi dist/*

.PHONY: pypi
pypi: clean build    ## Deploy package to production python repository
	@echo "Deploy $(PROJECT) to pypi.org"
	. $(VENV_DIR)/bin/activate && twine upload --repository pypi dist/*

.PHONY: test-install
test-install:  ## Local install - testpypi as source
	cd $(CUR_DIR) && . $(VENV_DIR)/bin/activate && \
	$(PIP_CALL) install -U $(PROJECT) --extra-index-url https://test.pypi.org/simple/

.PHONY: install
install:    ## Local install - pypi as source
	cd $(CUR_DIR) && . $(VENV_DIR)/bin/activate && \
	$(PIP_CALL) install -U $(PROJECT)

.PHONY: help
help:   ## Print help index
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {sub("\\\\n",sprintf("\n%22c"," "), $$2);printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)


.PHONY: clean-docs
clean-docs:    ## Remove build artifacts for documentation only
	@echo "Clean docs build"
	. $(VENV_DIR)/bin/activate && \
	cd $(DOC_PATH) && $(MAKE) clean

.PHONY: clean
clean:    ## Remove all build artifacts generated by make
	@echo "Cleanup"
	rm -rf $(VENV_DIR)
	rm -rf $(CUR_DIR)/dist
	rm -rf $(CUR_DIR)/*.egg-info
	rm -f $(CUR_DIR)/README.rst || true
	rm -rf $(CUR_DIR)/$(PROJECT)/__pycache__ || true
