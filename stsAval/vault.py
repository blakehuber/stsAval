"""
Summary:
    The vault module contains classes definitions for various types of credentials
    generated by Amazon's Secure Token Service (STS):

    - STSToken:  type definition for Amazon STS session tokens
    - STSCredentials:  type definition for Amazon STS temporary credentials

Module Attributes:
    logger - logging object

"""

import datetime
import inspect
from stsAval.statics import defaults
from stsAval import logd
from stsAval.statics import __version__


logger = logd.getLogger(__version__)




class STSToken():
    """
    structure for session tokens generated by Amazon STS
    """
    def __init__(self, token=None):
        self.ring = {}
        if token is None:
            self.start = ''
            self.end = ''
            self.expiration = ''
            self.duration = datetime.timedelta(seconds=0)
            self.raw = {}
            return
        else:
            self.init(token)

    def request_ring(self, index=None):
        """
         token ring is a facility for managing multiple session tokens (FUTURE)
        """
        if not self.token_ring:
            self.token_ring = []
        elif index:
            return self.token_ring[index]
        return self.token_ring

    def init(self, token):
        """ initializes a new token """
        try:
            self.start = token['StartTime']
            self.end = token['Expiration']
            self.expiration = token['Expiration'].isoformat()
            self.default = defaults['token_life']
            self.duration = token['Expiration'] - token['StartTime']
            self.access_key = token['AccessKeyId']
            self.secret_key = token['SecretAccessKey']
            self.session = token['SessionToken']
            self.raw = token
            #self.add(token)    # FUTURE: add init token to ring
        except KeyError as e:
            logger.exception(
                '%s: failure on key [%s] during token initalization' %
                (inspect.stack()[0][3], str(e)))
            raise
        return

    def add(self, new_token, overwrite=True):
        """
        adds a new token to the ring (FUTURE)
        """
        # calc index
        if overwrite:
            key_ring = max(len(self.ring) - 1, 0)
        else:
            key_ring = len(self.ring)    # add additional to keyring
        # add token to ring
        self.token_ring.append(
            {
                'start': new_token['StartTime'],
                'end': new_token['Expiration'],
                'access_key': new_token['AccessKeyId'],
                'secret_key': new_token['SecretAccessKey'],
                'session': new_token['SessionToken']
            }
        )
        return self.token_ring[key_ring]


class STSCredentials():
    """
    structure for temporary credentials generated by Amazon STS
    """
    def __init__(self, token, credentials):
        """
        initialize empty credentials object with null values or add if generated
        """
        self.ring = {}
        if credentials:
            self.add(credentials)
        else:
            self.role_name = ''
            self.raw = {}

    def request_ring(self, index=0):
        """
        a facility for managing multiple session credentials gen at diff times
        """
        return self.ring[index]

    def add(self, token, new_credentials, overwrite=True):
        """ adds new credentials to the ring """

        credentials = {}

        try:
            if overwrite:
                for key, value in new_credentials.items():
                    credentials[key] = {
                        'start': value['StartTime'],
                        'end': value['Expiration'],
                        'expiration': value['Expiration'].isoformat(),
                        'default': defaults['credential_life'],
                        'access_key': value['AccessKeyId'],
                        'secret_key': value['SecretAccessKey'],
                        'session': value['SessionToken']
                    }
                    # add role_name: expiration entry onto the ring.
                    self.ring[credentials[key]] = credentials[key]['end']
                    """
                    self.ring[credentials[key]] = token-that-generated-credentials  <<< LINK TOKEN TO CRED SET HERE
                    """
            else:
                return      # FUTURE
                # add creds to ring but accept duplicate credentials
                for key, value in new_credentials.items():
                    if key not in self.ring:
                        credentials[key] = {
                            'start': value['StartTime'],
                            'end': value['Expiration'],
                            'expiration': value['Expiration'].isoformat(),
                            'default': defaults['credential_life'],
                            'access_key': value['AccessKeyId'],
                            'secret_key': value['SecretAccessKey'],
                            'session': value['SessionToken']
                        }
                        # add role_name: expiration entry onto the ring.
                        self.ring[credentials[key]] = credentials[key]['end']
                    else:
                        # key (credentials) already exist
                        # check if expired; if so, overwrite them, not, raise ex
                        raise KeyError(
                            '%s: credentials [%s] already exist. Cannot add to ring.' %
                            (inspect.stack()[0][3], str(key)))

        except KeyError as e:
            logger.exception('%s: %s' % (inspect.stack()[0][3], str(e)))
        except Exception as e:
            logger.exception('%s: unknown Exception while adding credentials: %s' %
                (inspect.stack()[0][3], str(e)))
        return credentials

    def index_credentials(self, creds):
        unknown = set(credentials.keys())
        known = set(ring.keys())
        if uknown not in known:
            self.add(credentials)    # add init credentials to ring
        else:
            return self.ring[credentials]
